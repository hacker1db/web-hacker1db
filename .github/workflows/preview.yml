name: Preview Deployment

on:
  pull_request:
    branches: [ main ]

jobs:
  preview:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Install Vercel CLI
      run: npm install -g vercel

    - name: Deploy Preview to Vercel
      id: vercel-deployment
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        # Deploy to Vercel and capture the preview URL
        DEPLOY_URL=$(vercel --token "$VERCEL_TOKEN" --org-id "$VERCEL_ORG_ID" --project-id "$VERCEL_PROJECT_ID" --yes --prod=false --cwd . --scope "$VERCEL_ORG_ID" 2>&1 | tee /tmp/vercel.log | grep -Eo 'https://[a-zA-Z0-9.-]+\.vercel\.app' | tail -1)
        echo "preview-url=$DEPLOY_URL" >> $GITHUB_OUTPUT
    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Preview deployment')
          );
          
          const body = `## ðŸš€ Preview deployment
          
          Your changes have been deployed to a preview environment:
          
          **Preview URL:** ${{ steps.vercel-deployment.outputs.preview-url }}
          
          This preview will be updated automatically when you push new commits to this PR.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }