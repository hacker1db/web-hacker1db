3:"$Sreact.fragment"
4:I[4839,["839","static/chunks/839-a515138e2741537f.js","156","static/chunks/app/posts/%5B...slug%5D/page-a16ee2df3ef942bb.js"],""]
5:I[5244,[],""]
6:I[3866,[],""]
8:I[6213,[],"OutletBoundary"]
a:I[6213,[],"MetadataBoundary"]
c:I[6213,[],"ViewportBoundary"]
e:I[4835,[],""]
1:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/_next/static/css/a8f60f2670d75067.css","style"]
0:{"P":null,"b":"wDW6FWYFp_H972QC8juSM","p":"","c":["","posts",""],"i":false,"f":[[["",{"children":["posts",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$3","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a8f60f2670d75067.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n  body {\n    margin: 0;\n    padding: 0;\n    background-color: #1a1d21;\n    color: #ffffff;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    min-height: 100vh;\n  }\n  \n  .terminal-cursor::after {\n    content: \"_\";\n    animation: blink 1s infinite;\n    color: #6FC1FF;\n  }\n  \n  @keyframes blink {\n    0%, 50% { opacity: 1; }\n    51%, 100% { opacity: 0; }\n  }\n  \n  .circle {\n    border-radius: 50%;\n    max-width: 200px;\n    height: auto;\n  }\n  \n  a {\n    color: inherit;\n    text-decoration: none;\n    transition: color 0.2s ease;\n  }\n  \n  a:hover {\n    color: #6FC1FF;\n  }\n"}}]}],["$","body",null,{"className":"__className_f367f3","children":["$","div",null,{"style":{"display":"flex","flexDirection":"column","minHeight":"100vh"},"children":[["$","header",null,{"style":{"backgroundColor":"#1a1d21","borderBottom":"1px solid #374151","padding":"1rem 0"},"children":["$","div",null,{"style":{"maxWidth":"1024px","margin":"0 auto","padding":"0 1rem","display":"flex","alignItems":"center","justifyContent":"space-between"},"children":[["$","$L4",null,{"href":"/","style":{"fontFamily":"Monaco, Menlo, Courier New, monospace","fontSize":"1.125rem","color":"#6FC1FF","textDecoration":"none"},"children":[["$","span",null,{"children":"$$ cd /home/"}],["$","span",null,{"className":"terminal-cursor","style":{"color":"#6FC1FF"}}]]}],["$","nav",null,{"style":{"display":"flex","gap":"1.5rem"},"children":[["$","$L4",null,{"href":"/","style":{"color":"#d1d5db","textDecoration":"none","transition":"color 0.2s ease"},"children":"Home"}],["$","$L4",null,{"href":"/posts","style":{"color":"#d1d5db","textDecoration":"none","transition":"color 0.2s ease"},"children":"Posts"}],["$","$L4",null,{"href":"/about","style":{"color":"#d1d5db","textDecoration":"none","transition":"color 0.2s ease"},"children":"About"}]]}]]}]}],["$","main",null,{"style":{"flexGrow":1,"maxWidth":"1024px","margin":"0 auto","padding":"2rem 1rem"},"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","footer",null,{"style":{"backgroundColor":"#1a1d21","borderTop":"1px solid #374151","padding":"2rem 0"},"children":["$","div",null,{"style":{"maxWidth":"1024px","margin":"0 auto","padding":"0 1rem","display":"flex","justifyContent":"space-between","alignItems":"center","flexWrap":"wrap","gap":"1rem"},"children":[["$","div",null,{"style":{"color":"#9ca3af","fontSize":"0.875rem"},"children":"thoughts and ideas of hacker1db"}],["$","div",null,{"style":{"color":"#9ca3af","fontSize":"0.875rem","textAlign":"right"},"children":[["$","div",null,{"dangerouslySetInnerHTML":{"__html":"Powered by <a href='https://nextjs.org/'>Next.js</a>, and <a href='https://github.com'>GitHub</a>"}}],["$","div",null,{"style":{"marginTop":"0.25rem"},"children":["© ",2025," ","hacker1db"]}]]}]]}]}]]}]}]]}]]}],{"children":["posts",["$","$3","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$3","c",{"children":["$L7",null,["$","$L8",null,{"children":"$L9"}]]}],{},null]},null]},null],["$","$3","h",{"children":[null,["$","$3","LhlL7tr8DdgRp1V6ZHl6B",{"children":[["$","$La",null,{"children":"$Lb"}],["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust"}]]}]]}]]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:I[7067,["839","static/chunks/839-a515138e2741537f.js","597","static/chunks/597-715fe396b7d4697a.js","530","static/chunks/app/posts/page-b51d03262d0f266b.js"],"default"]
10:T1299,<h1>Remote Work</h1>
<p>Working from home (WFH) is no longer a luxury or a temporary solution; it's a way of life for many of us. As a DevSecOps engineer, I’ve spent countless hours working remotely, balancing security, collaboration, and productivity. While WFH offers flexibility, it also presents unique challenges—especially in security-focused roles. Here are five practical tips to help you thrive in a remote work environment.</p>
<hr>
<h2>1. Secure Your Home Office Network</h2>
<p>Your home network might not have the same protective measures as your company’s office, making it a potential vulnerability. Here’s how to secure it:</p>
<ul>
<li><strong>Use a VPN</strong>: Always connect to your company’s VPN to encrypt your internet traffic.</li>
<li><strong>Update Your Router Firmware</strong>: Outdated firmware can expose your network to attackers.</li>
<li><strong>Enable WPA3 Encryption</strong>: Use the latest Wi-Fi encryption protocol for maximum security.</li>
<li><strong>Segment Your Network</strong>: Create a separate Wi-Fi network for work devices to isolate them from IoT gadgets.</li>
</ul>
<p>As DevSecOps professionals, we know the importance of proactive security measures. Apply this same vigilance to your home network.</p>
<hr>
<h2>2. Streamline Collaboration with the Right Tools</h2>
<p>Effective communication and collaboration are vital for remote teams. Equip yourself with the right tools:</p>
<ul>
<li><strong>Version Control Systems (VCS)</strong>: Use GitHub, GitLab, or Bitbucket for collaborative coding with proper branching strategies.</li>
<li><strong>Secure Messaging Apps</strong>: Tools like Slack or Microsoft Teams are essential but configure them with multi-factor authentication (MFA).</li>
<li><strong>Kanban Boards</strong>: Platforms like Jira or Trello keep everyone aligned on project progress.</li>
<li><strong>Video Conferencing</strong>: Use platforms with end-to-end encryption (e.g., Zoom with E2EE enabled) for sensitive discussions.</li>
</ul>
<hr>
<h2>3. Adopt Secure Coding Practices</h2>
<p>Your home setup may not have the same defenses as your office environment, so ensure your coding habits prioritize security:</p>
<ul>
<li><strong>Pre-Commit Hooks</strong>: Tools like <code>pre-commit</code> or Git hooks can enforce coding standards and prevent committing secrets.</li>
<li><strong>Secret Management</strong>: Use tools like HashiCorp Vault or 1Password to securely store sensitive credentials.</li>
<li><strong>Automate Security Scans</strong>: Integrate tools like Snyk or SonarQube into your CI/CD pipeline.</li>
<li><strong>Principle of Least Privilege</strong>: Limit access to repositories and tools to those who absolutely need it.</li>
</ul>
<hr>
<h2>4. Optimize Your Physical Workspace</h2>
<p>A comfortable and distraction-free workspace can significantly improve productivity:</p>
<ul>
<li><strong>Ergonomic Setup</strong>: Invest in an adjustable chair, a monitor riser, and a quality keyboard and mouse.</li>
<li><strong>Dual Monitors</strong>: If your work involves coding or managing dashboards, a second monitor is a game-changer.</li>
<li><strong>Good Lighting</strong>: Use natural light or an adjustable desk lamp to reduce eye strain.</li>
<li><strong>Noise-Canceling Headphones</strong>: These are invaluable during virtual meetings or focus-heavy tasks.</li>
</ul>
<hr>
<h2>5. Set Boundaries to Avoid Burnout</h2>
<p>Remote work can blur the line between personal and professional life. Protect your mental health with these practices:</p>
<ul>
<li><strong>Define Work Hours</strong>: Clearly communicate your availability to your team and stick to a set schedule.</li>
<li><strong>Take Regular Breaks</strong>: Use the Pomodoro Technique or similar methods to maintain focus without overworking.</li>
<li><strong>Log Off Completely</strong>: Disconnect from work accounts and notifications after hours to recharge.</li>
<li><strong>Engage in Continuous Learning</strong>: Use downtime to enhance your skills with platforms like Pluralsight, Udemy, or Coursera.</li>
</ul>
<hr>
<h2>Final Thoughts</h2>
<p>Working from home offers incredible flexibility but also unique challenges, especially in security-critical roles like DevSecOps. By securing your network, leveraging the right tools, adopting secure coding practices, optimizing your workspace, and setting clear boundaries, you can succeed in a remote environment while maintaining productivity and peace of mind.</p>
<p>Whether you’re implementing zero trust architectures or troubleshooting CI/CD pipelines, your well-being and security are just as critical as the code you write.</p>
<p>What strategies have worked for you in your WFH journey? Share your insights in the comments below!</p>
11:T2cbb,<h1>What Software engineers should know about building docker files</h1>
<blockquote>
<p>So sounds like you want a shortcut answer, we do not have any of those in stock.</p>
</blockquote>
<p>Things to note, when I talk about docker I am referring to containers in general. I know that in the world of software engineering, we are all trying to learn. I know that some of these concepts are difficult to fully remember so, refer back to this blog post next you are building a new container.</p>
<p>I am not providing an example of a secure image as this post is less about <strong>here copy paste this example</strong> and more about giving you the building blocks to <strong>fish for yourself</strong>.</p>
<p>I will make some assumptions that you have a basic understanding of what containers are and have probably built a few containers.</p>
<h2>Part 1 - back to the basics</h2>
<ul>
<li>Understanding dockerfile instructions such as <code>FROM</code>
<ul>
<li><a href="https://docs.docker.com/engine/reference/builder">Here is the reference list of building docker files</a></li>
</ul>
</li>
<li>Understanding layers and using multi-stage builds
<ul>
<li>Understand <a href="https://docs.docker.com/build/building/multi-stage/">Multi stage builds</a></li>
</ul>
</li>
<li>Understanding of file system and user permissions</li>
</ul>
<p>The best way I have seen engineers really understand docker is when they fully understand the file system they are using.</p>
<p>I have seen lots of engineers not understand the basics of common Linux distro's or what the default admin user is in windows (<strong>Administrator</strong>).</p>
<p>If you do not have the proper foundation you will just wind up guessing and that is a high likelihood of making things worse for yourself.</p>
<h3>Common Linux base images</h3>
<ul>
<li>Debian Linux</li>
<li>Alpine Linux</li>
<li>Ubuntu Linux</li>
</ul>
<h2>Part 2 - Running containers and docker context</h2>
<ul>
<li>Docker from some image on the internet or (internal)</li>
<li>pull and push from a registry
<ul>
<li>pull and run locally</li>
<li>push from local</li>
<li>push from the build pipeline</li>
</ul>
</li>
<li>looking around inside the container</li>
</ul>
<p>The big problem I see is that most engineers struggle to understand what context they are in for example knowing what the current folder path is when copy files from the local computer into the image.</p>
<h2>part 3 - the tools and common pitfalls</h2>
<p>Let's talk about the tools, this list is from my experience as a full time DevSecOps engineer these are tools I use help teams daily fix their images.</p>
<ul>
<li>Dive <em>A tool for exploring a docker image, layer contents, and discovering ways to shrink the size of your Docker/OCI image.</em></li>
<li>Scanning tools
<em>remember to scan as you go along, and at every commit.</em> This is why <a href="https://githooks.com/">git commit hooks</a>) are really helpful for this to become second nature.</li>
</ul>
<h3>Common pitfalls</h3>
<p>Below is a list of common problems I have seen over my time as an information security practitioner, it is by no means exhaustive and the nature of security is subject to change which is part of the beauty of the role.</p>
<ol>
<li>STOP it!! Running your container as root -- I mean come on <strong>I said the least privilege...please</strong></li>
</ol>
<ul>
<li>This includes administrator for windows based containers, as I stated previously in the basics section you should take the time to have a solid foundation in how these operating systems are structured.</li>
</ul>
<ol start="2">
<li>Just because you need it in dev does not mean you need it in production. <strong>Tools like Curl should be removed</strong>, the concept is to lower attack surface area.</li>
<li>Using more secure base images that have fewer tools or packages installed on them. One great example of this is <strong>Alpine-based images</strong>. I wanted to mention this as a side note, I personally run the latest version of a base image tag such as the following.</li>
</ol>
<blockquote>
<p>this is the image I use as my release layer but I think you should do the same for the build layer as well.</p>
</blockquote>
<pre><code class="language-dockerfile">FROM golang:alpine
</code></pre>
<p>This does again require that you take the time to understand how these more locked-down operating systems work. This also means you need to take the time to understand your language and framework at a deeper level.</p>
<ol start="4">
<li>Outdated packages, <strong>you may be bringing in more than you know</strong>.
<ul>
<li>On this related note, you may have outdated packages pre-installed `Think about packages like OpenSSL you are responsible to update this package.
<ul>
<li>These are Operating system-level packages that also need to be maintained and updated. I see a lot of cases this will be handled by updating the <code>FROM BaseImageVersionTag</code> that is used in the base layer of the image.</li>
</ul>
</li>
</ul>
</li>
<li>Stop taking the default <strong>copy-paste container images</strong> from some website or tutorial.
<ul>
<li>This includes those from your editor i.e Visual Studio or Jet Brains these are meant to give you a starter template to get up and running but are not production ready.</li>
</ul>
</li>
<li>Secure or confidential information being copied over the container
<ul>
<li>The example here is <code>ssh keys or certificates</code>, Trivy scanner will highlight this for you.</li>
</ul>
</li>
<li>Dependency hell of nested packages - In some cases where packages are required of other packages these are the culprits. Meaning that you may have to locate the outdated version and update it to a secure version of it because the maintainers have not been to update the upstream package that you actually are required to run the application.
In the world of C#, this takes on the <em>deps.json</em> located in the bin/{either debug or release} folder or in the Javascript world node modules bringing in some required package that has an open <a href="https://cve.mitre.org/">CVE</a>.
I bring these files up as the simple fix generally is to find the dependency and override the outdated vulnerable version.</li>
</ol>
<h3>Please just stop doing this</h3>
<ol>
<li>Stop building images for each environment, the goal should be to build and ship one artifact.
If you do not follow this pattern you end up defeating one of the main benefits of containers build and ship once. Your configuration or secrets should come from an external vault or configuration service. But <code>hacker1db my config is not a secret why can't I just check it into my source control and ship it that way?</code> Well if it's good enough for your secrets and you already have to fetch them why would you not just pull all your configuration from a secure place.</li>
<li>Don't just fix the issue locally on your machine <code>Open an issue on the repo of the package that has an issue</code> give back to the community!
<ol>
<li>Fix the issue if you can find some spare time to give back to those whose code you are using.</li>
<li>Check to see if there is an open issue already on the repo, or in this case see if there is a security advisory</li>
</ol>
</li>
</ol>
<h3>Tools you will benefit from</h3>
<p>For the purposes of tools, I am going to talk about a tool that is open-source and can be used in both personal and professional projects.</p>
<blockquote>
<p>NOTE: I may at some point write a blog post that talks about commercial tools and my personal thoughts on them.</p>
</blockquote>
<ul>
<li><a href="https://github.com/wagoodman/dive">Dive</a></li>
</ul>
<p>Dive is super helpful for looking in the built image container when you want to see how the file system is getting evaluated.</p>
<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/cli/">learning the command line arguments of docker</a></li>
</ul>
<p>I put this in here so that you would be able to understand how to run locally so that when you go run them in a pipeline you know what each parameter does.</p>
<ul>
<li><a href="https://linuxize.com/post/how-to-create-bash-aliases/">alias's commands to shorthand so you do not need to keep repeating yourself</a></li>
</ul>
<p>I do this all time with commands I run together, if you set up your repository where the docker file is always in the same place this will be even easier. The awesome benefit of the alias is you can chain commands together for example you can do the following when building on mac.</p>
<pre><code class="language-shell">alias dbs="docker build --tag localimage:testtag . | trivy image localimage:testtag"
</code></pre>
<ul>
<li><a href="https://github.com/aquasecurity/trivy">Trivy Scanner -- Container Scanning</a></li>
</ul>
<p>Trivy is an open-source scanner you can use for free and I used it above.</p>
<figure style="margin: 2rem 0; text-align: center;">
  <img src="/posts/cybersecurity/trivy.png" alt="Trivy Scanner example" style="max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
</figure>
<ul>
<li><a href="https://snyk.io/learn/docker-security-scanning/">Synk -- Container scanning</a></li>
</ul>
<p>I put Synk in here as it is built into docker cli but this <em>is a paid product</em>.</p>
<ul>
<li>
<p><a href="https://pre-commit.com/">Pre Commit hooks</a></p>
</li>
<li>
<p><a href="https://githooks.com/">Git hooks general info</a></p>
</li>
</ul>
<p>Pre-commit hooks are great but start with an alias and build up the habit of scanning the container image before you push the code up to the repo.</p>
<h3>Honorable mention tools (Advanced)</h3>
<hr>
<h4><a href="https://docs.sigstore.dev/main-concepts">Container signing with sigstore</a></h4>
<h4><a href="https://www.aquasec.com/cloud-native-academy/supply-chain-security/sbom/">SBOM Tools -- what is SBOM</a></h4>
<p>SBOM is becoming more and more important as we need to keep track of what we are bringing along for the ride in production. The best place to start here is just to list out the technology you are using in the project's readme file of the repository. Start with the basic list of tech and build up to using these tools.</p>
<ul>
<li><a href="https://github.com/anchore/syft">syft</a></li>
<li><a href="https://aquasecurity.github.io/trivy/v0.27.1/docs/references/cli/sbom/">Trivy SBOM</a></li>
<li><a href="https://github.com/microsoft/sbom-tool">microsoft sbom-tool</a></li>
</ul>
<h2>Wrap up</h2>
<p>Thank you for sticking to the end, I know that I did not give any just do this and all the security problems will go away. I do not think that is helpful for you as that is not the reality. Technology will continue to change and we will continue to learn and get better and what we do. If you have any questions please leave a comment or message me on Twitter.</p>
<p>I now have a <a href="https://newsletter.hacker1db.dev/">news letter</a>, if you want to get some insider content.</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%; margin: 2rem 0;">
  <iframe 
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: 0; border-radius: 8px;"
    src="https://www.youtube.com/embed/wHHc9Ygvp5s"
    title="YouTube video player"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen>
  </iframe>
</div>
12:Tf19,<h1>I want to learn DevOps</h1>
<h2><strong>DevOps Manifesto</strong></h2>
<p>DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.</p>
<h3>What is DevOps</h3>
<p><a href="https://github.blog/2020-10-07-devops-definition/">https://github.blog/2020-10-07-devops-definition/</a></p>
<h3>Area’s to learn</h3>
<ul>
<li>Commend line - most of the work I do is based on the fact that I am comfortable and fully understand the command line tools and parameters I can pass into these tools, said simply if you know how to use it locally you can use it in pipeline.</li>
<li>Yaml syntax - <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&#x26;tabs=schema%2Cparameter-schema">https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&#x26;tabs=schema%2Cparameter-schema</a></li>
<li>GitHub flow - <a href="https://guides.github.com/introduction/flow/">https://guides.github.com/introduction/flow/</a></li>
<li>CI VS CD - <a href="https://lab.github.com/MSUSDEV/build-end-to-end-cicd-capabilities-directly-in-github">https://lab.github.com/MSUSDEV/build-end-to-end-cicd-capabilities-directly-in-github</a></li>
<li>Conventional Commits - <a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/</a></li>
<li>IAC - <a href="https://alpacked.io/blog/infrastructure-as-code-for-devops">https://alpacked.io/blog/infrastructure-as-code-for-devops</a></li>
<li>Branching Strategies - <a href="https://www.gitkraken.com/learn/git/best-practices/git-branch-strategy">https://www.gitkraken.com/learn/git/best-practices/git-branch-strategy</a></li>
</ul>
<h3>Git Workflow</h3>
<p><a href="https://guides.github.com/introduction/flow/">https://guides.github.com/introduction/flow/</a></p>
<h3>Branching Patterns</h3>
<p><code>Example: feature/1-MyReallyAwesomeFeatureThatWillMakeUsLotsOfMoney</code></p>
<p>Branch prefix types</p>
<ul>
<li>feature</li>
<li>bug</li>
<li>chore</li>
</ul>
<pre><code class="language-go">{story type}/{pivotal tracker id}-{summary that is descriptive of the Story i.e the title}
</code></pre>
<p>Branching patterns dictate how your workflow will end up being like, as is really the backbone for how you will build out your pipelines.</p>
<h2>Devops books</h2>
<ul>
<li><a href="https://www.amazon.com/DevOps-Handbook-World-Class-Reliability-Organizations/dp/1950508404/ref=sr_1_1?keywords=devops+handbook&#x26;qid=1644814038&#x26;s=books&#x26;sprefix=DevOps+hand%2Cstripbooks%2C119&#x26;sr=1-1">DevOps hand book</a></li>
<li><a href="https://www.amazon.com/Securing-DevOps-Security-Julien-Vehent/dp/1617294136/ref=sr_1_3?keywords=securing+devops&#x26;qid=1644814078&#x26;s=books&#x26;sprefix=Securing+d%2Cstripbooks%2C123&#x26;sr=1-3">Securing DevOps</a></li>
<li><a href="https://www.amazon.com/Alice-Bob-Learn-Application-Security/dp/1119687357">Alice and Bob Learn Application Security </a></li>
</ul>
<h2>Helpful Inks</h2>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/learn/what-is-devops">https://docs.microsoft.com/en-us/azure/devops/learn/what-is-devops</a></li>
<li><a href="https://theagileadmin.com/2010/10/15/a-devops-manifesto/">https://theagileadmin.com/2010/10/15/a-devops-manifesto/</a></li>
<li><a href="https://guides.github.com/introduction/flow/">https://guides.github.com/introduction/flow/</a></li>
<li><a href="https://www.youtube.com/watch?v=yCf5tb6snFg&#x26;list=WL&#x26;index=87&#x26;t=1381s">https://www.youtube.com/watch?v=yCf5tb6snFg&#x26;list=WL&#x26;index=87&#x26;t=1381s</a></li>
</ul>
<h2>Examples and training</h2>
<ul>
<li><a href="https://github.com/Azure/devops-governance">https://github.com/Azure/devops-governance</a></li>
<li><a href="https://github.com/heoelri/adopac">https://github.com/heoelri/adopac</a></li>
</ul>
13:Tdbe,<h1>How to start programing</h1>
<h2>Basic list of topics</h2>
<ul>
<li>Basic Syntax</li>
<li>Data Types</li>
<li>Variables</li>
<li>Keywords</li>
<li>Basic Operators</li>
<li>Decision-Making</li>
<li>Loops
<ul>
<li>while loops</li>
<li>for loops</li>
</ul>
</li>
<li>Numbers
<ul>
<li>Math</li>
</ul>
</li>
<li>Arrays</li>
<li>Dictionay/key Value pairs
<ul>
<li>think working with json data in its simplest form.</li>
</ul>
</li>
<li>Strings</li>
<li>Functions</li>
<li>File I/O</li>
</ul>
<h2>More Advanced but valuable</h2>
<ul>
<li>class's</li>
<li>inheritance</li>
<li>interfaces</li>
<li>Unit Testing</li>
<li>Integration testing/End-To-End Testing (E2E Testing)</li>
<li>abstract class and concrete</li>
<li>Learn how to understand the doc's for each language you work with.</li>
<li>Secrets management</li>
<li>Common Security issues with the language, simply put go read the docs on the security features that come with the language/framework.</li>
<li>Package management, Installing, Updating, and locking the packages you use so you know what versoin of things you are using.</li>
<li><a href="/posts/posts/DevOps/I-want-to-learn-DevOps" title="DevOps GettingStarted"> Read I Want to learn DevOps</a></li>
<li>Learn Git, start with GitHub they have <a href="https://lab.github.com/">learning lab located here</a> this is free with an github account and its a great place to store your projects as you continue learning.</li>
</ul>
<h2>How/where to learn</h2>
<ul>
<li>Youtube! :) lots of free content</li>
<li>Pick a language and follow along with that language's/framework <em>getting started guide</em></li>
<li><a href="https://app.pluralsight.com/library/">Pluralsight</a> this is personally what I used to get a programing job its what helped me take on some the More Advanced but valuable topics.</li>
<li>Blog posts, follow along with so you can see structure and look for the why behind it all.</li>
</ul>
<h2>What lanague should I learn?</h2>
<p><strong>The language does not matter!</strong>
Use what language you are familiar with, that you are interested in learning. This will keep you engaged rather then
you end up getting frustratd that I did not tell you to learn <em>'X'</em> language but just so you have some point of refernce. I
will be writing a more indepth blog post on what each languages are using for in gernal why.</p>
<ul>
<li><em>Python Most start out with this language simply well becuase it simple to read and understand and its been around for a while.</em></li>
<li>Javascript, is great for mostly frontend i.e web pages, and mobile dev where you want to keep it all in the same language.
<ul>
<li>React Native for Mobile Dev.</li>
<li>React for Frontend, Svelte, NextJs</li>
<li>NodeJs
<em>Learn TypeScript</em> if your going to write Javascript but learn the core concepts first.</li>
</ul>
</li>
<li>C#, Well known language in Enterprises and supportd by Microsoft.</li>
<li>Go, and up and coming language put out by google</li>
</ul>
<h2><em>TLDR</em></h2>
<ol>
<li>Build something you would use.</li>
<li>Build somehting you want to share (<em>Blogs are an easy first one.</em>)</li>
<li>Rinse and repeat</li>
<li>The Language does matter at the end of the day it is personal prefernce.</li>
</ol>
<hr>
<h2>Links/Resources</h2>
<ul>
<li><a href="https://kotlinlang.org/">Kotlin Programming Language</a></li>
<li><a href="https://reactnative.dev/">React Native · Learn once, write anywhere</a></li>
<li><a href="https://exercism.org/dashboard">Exercism</a></li>
</ul>
14:Tdf8,<h1>The world of Infosec "No sugar coating it!"</h1>
<h2><center><strong> Getting started - if you could hire me that would be great! </strong><center></h2>
<p>So let's be honest, getting started is a bit of misnomer.
why is that you ask well everyone wants to go directly into infosec and while that might be awesome and trust me
its a great feeling when you finally "Make it!" but really if you want to do well in information security you have
to be in love with the field otherwise you'll just end up burnt out! joining the <strong>" I hate my job group."</strong></p>
<p>I absolutely love infosec, I love that it is never the same each day has something new to offer, something new to learn
but that being said you are always learning! - "The Day I stop learning is the day I die." - @hacker1db</p>
<h2>So what do you need to know:</h2>
<p>So I could tell you that getting a degree and a cert will make you hireable but three main ingredients in getting
started in Infosec:</p>
<ul>
<li>College/schooling</li>
<li>Certs</li>
<li>experience</li>
</ul>
<p>I can't tell you how much experience is a must, all the certs and schooling will be the same as doing hands-on
work! Experience is probably the hardest thing for most people to get so let me give some insights from life.
We have all started from somewhere, so ask lots of questions but I mean if you don't know start with a simple google
search before you ask someone else.</p>
<ol>
<li>this helps you learn to find what you're looking for on the internet.</li>
<li>You will most likely find it on the internet. but if you don't at least when you got to ask someone you might have
learned something ahead of time that will help you ask better questions. I find that doing this before I ask someone
helps me to ask more accurate questions.
Back to getting experience the best thing that I found is volunteering - yes I know it's not paid but if don't put in the work you probably succeed in this industry. But it really is the best way to get experience internships/volunteering most local colleges, non-profits, and even some high school may let you come and just fix computers and learn from
someone it is really either that or you start at a helpdesk somewhere and work your way up from there.</li>
</ol>
<p>The goal of having you start at a helpdesk level is that you learn a lot about how things fundamentally work and without a
foundation, you have nothing to build on.</p>
<ul>
<li>you will learn how to talk to non-technical people - <strong>"soft skills"</strong></li>
<li>you will learn how to handle different types of tasks as they are thrown at you.</li>
<li>you will learn multiple different technology stacks - Active directory, Firewall's, routing and switching, common
issues with different os types.</li>
<li>Gives you a platform to ask questions in person, this is super helpful when you are starting out.</li>
</ul>
<h3>I can hear it now - <em>"But I am already in I.T"</em></h3>
<p>Now if you are already in an I.T job which is where I found myself before I made the jump.</p>
<h4>Resouces</h4>
<ul>
<li><a href="https://github.com/onlurking/awesome-infosec">awesome infosec</a></li>
<li><a href="https://www.blackhillsinfosec.com/blog/">blackhills infosec..eh-hmm(youtube search information security)</a></li>
<li><a href="https://github.com/apsdehal/awesome-ctf">CTF's</a></li>
<li><a href="https://twitter.com/hacker1db">twitter</a></li>
<li><a href="https://www.meetup.com/apps/">security con's if you can afford to go, also check out your local meetup's look at the meetup app!</a></li>
</ul>
7:["$","div",null,{"style":{"maxWidth":"1200px","margin":"0 auto"},"children":[["$","h1",null,{"style":{"fontSize":"2.5rem","fontWeight":"700","marginBottom":"3rem","textAlign":"center","color":"#ffffff"},"children":"Blog Posts"}],[["$","div",null,{"style":{"textAlign":"center","marginBottom":"2rem","color":"#9ca3af","fontSize":"1rem"},"children":[5," ","posts"," • Covering Cyber Security, DevOps, Programming & More"]}],["$","div",null,{"style":{"display":"grid","gridTemplateColumns":"repeat(auto-fit, minmax(350px, 1fr))","gap":"2rem","padding":"0 1rem"},"children":[["$","$Lf","Programing/five-things-to-help-with-work-from-home",{"post":{"slug":"Programing/five-things-to-help-with-work-from-home","content":"$10","data":{"title":"Five Things to Help With Work From Home","date":"$D2023-03-12T00:47:15.000Z","subtitle":"Remote Work","author":"","toc":true,"Comments":false,"series":[],"tags":["Work from home","WFH","Remote work"],"category":""},"excerpt":"{{< param subtitle >}} Working from home (WFH) is no longer a luxury or a temporary solution; it's a way of life for many of us. As a DevSecOps engineer, I’ve spent countless hours working remotely, b..."}}],["$","$Lf","CyberSecurity/WritingDockerImagesFromDevSecOpsEnngineer",{"post":{"slug":"CyberSecurity/WritingDockerImagesFromDevSecOpsEnngineer","content":"$11","data":{"title":"","date":"$D2023-01-08T00:00:00.000Z","subtitle":"What Software engineers should know about building docker files","author":"","toc":true,"Comments":false,"series":[],"tags":[],"category":""},"excerpt":"{{< param subtitle >}} > So sounds like you want a shortcut answer, we do not have any of those in stock. Things to note, when I talk about docker I am referring to containers in general. I know that..."}}],["$","$Lf","DevOps/I-want-to-learn-DevOps",{"post":{"slug":"DevOps/I-want-to-learn-DevOps","content":"$12","data":{"title":"Getting Started I want to learn DevOps","date":"$D2022-02-13T00:00:00.000Z","subtitle":"I want to learn DevOps","author":"hacker1db","toc":true,"Comments":true,"series":["Getting Started"],"tags":["Getting Started","DevOps"],"category":""},"excerpt":"{{< param subtitle >}}  DevOps Manifesto DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.  What is DevOps https://github.blog/2020-10-07-de..."}}],["$","$Lf","Programing/how-to-start-programming",{"post":{"slug":"Programing/how-to-start-programming","content":"$13","data":{"title":"Getting Started How To Start Programming","date":"$D2022-02-13T00:00:00.000Z","subtitle":"How to start programing","author":"","toc":true,"Comments":false,"series":["Getting Started"],"tags":["Programming","Learning","Software Engineering"],"category":""},"excerpt":"{{< param subtitle >}}  Basic list of topics - Basic Syntax - Data Types - Variables - Keywords - Basic Operators - Decision-Making - Loops   - while loops   - for loops - Numbers   - Math - Arrays -..."}}],["$","$Lf","CyberSecurity/infosec-getting-started",{"post":{"slug":"CyberSecurity/infosec-getting-started","content":"$14","data":{"title":"Getting started in the world of Infosec","date":"$D2019-02-09T00:00:00.000Z","subtitle":"The world of Infosec \"No sugar coating it!\"","author":"","toc":true,"Comments":true,"series":["Getting Started"],"tags":["CyberSecurity","Getting started"],"category":""},"excerpt":"{{< param subtitle >}}  <center><strong> Getting started - if you could hire me that would be great! </strong><center> So let's be honest, getting started is a bit of misnomer. why is that you ask wel..."}}]]}]]]}]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Hacker1db.dev blog"}],["$","meta","2",{"name":"description","content":"Hack Your Life One Day At a Time"}],["$","meta","3",{"name":"author","content":"hacker1db"}],["$","meta","4",{"name":"keywords","content":"Homepage, Blog, Programming, Cyber Security, DevSecOps, Music, Travel, Coffee"}],["$","meta","5",{"property":"og:title","content":"Hacker1db.dev blog"}],["$","meta","6",{"property":"og:description","content":"Hack Your Life One Day At a Time"}],["$","meta","7",{"property":"og:type","content":"website"}],["$","meta","8",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","9",{"name":"twitter:title","content":"Hacker1db.dev blog"}],["$","meta","10",{"name":"twitter:description","content":"Hack Your Life One Day At a Time"}]]
9:null
